name: Playwright Tests

on:
  workflow_dispatch:
    inputs:
      browser:
        description: 'Select browser to run tests on'
        required: true
        type: choice
        default: 'chromium'
        options:
          - chromium
          - firefox
          - webkit
          - All

      spec:
        description: 'Select spec file to run'
        required: true
        type: choice
        default: 'automationDemoSite.spec.ts'
        options:
          - automationDemoSite.spec.ts
          - dynamicTablePDF.spec.ts
          - example.spec.ts
          - playgpdf.spec.ts
          - playgrounddoc.spec.ts
          - playgroundDynamic.spec.ts
          - playgroundIMG.spec.ts
          - qaPlayground.spec.ts
          - qaPlaygroundDemoSite.spec.ts
          - screener.spec.ts
          - All

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Run Playwright tests (based on selection)
      - name: Run Playwright tests
        run: |
          echo "Running on browser: ${{ github.event.inputs.browser }}"
          echo "Running spec: ${{ github.event.inputs.spec }}"

          if [ "${{ github.event.inputs.browser }}" = "All" ]; then
            if [ "${{ github.event.inputs.spec }}" = "All" ]; then
              npx playwright test --reporter=html
            else
              npx playwright test tests/${{ github.event.inputs.spec }} --reporter=html
            fi
          else
            if [ "${{ github.event.inputs.spec }}" = "All" ]; then
              npx playwright test --project=${{ github.event.inputs.browser }} --reporter=html
            else
              npx playwright test tests/${{ github.event.inputs.spec }} --project=${{ github.event.inputs.browser }} --reporter=html
            fi
          fi

      # Upload Playwright HTML report
      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.event.inputs.browser }}
          path: playwright-report/
          retention-days: 30

      # Zip only the downloaded files and set output
      - name: Zip downloaded files
        id: zip_downloaded_files
        if: always()
        run: |
          DOWNLOAD_DIR=".artifacts/downloads"
          ZIP_FILE=".artifacts/downloads.zip"

          echo "Contents of $DOWNLOAD_DIR before zip:"
          ls -al "$DOWNLOAD_DIR" || echo "Directory not found"

          if [ -d "$DOWNLOAD_DIR" ]; then
            mkdir -p .artifacts
            zip -r "$ZIP_FILE" "$DOWNLOAD_DIR"
            if [ -f "$ZIP_FILE" ]; then
              echo "zip_created=true" >> $GITHUB_OUTPUT
              echo "ZIP file created successfully: $ZIP_FILE"
            else
              echo "zip_created=false" >> $GITHUB_OUTPUT
              echo "Failed to create ZIP file"
            fi
          else
            echo "No downloaded files found"
            echo "zip_created=false" >> $GITHUB_OUTPUT
          fi

      # Upload zipped downloaded files as workflow artifact
      - name: Upload downloaded files as artifact
        if: ${{ steps.zip_downloaded_files.outputs.zip_created == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: downloaded-files
          path: .artifacts/downloads.zip
          retention-days: 30

      # Add summary
      - name: Add summary
        run: |
          echo "### Playwright Manual Test Run" >> $GITHUB_STEP_SUMMARY
          echo "**Browser:** ${{ github.event.inputs.browser }}" >> $GITHUB_STEP_SUMMARY
          echo "**Spec:** ${{ github.event.inputs.spec }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Report and downloaded files are available in the Artifacts section above." >> $GITHUB_STEP_SUMMARY
